import os
import io
import re
import time
import json
import random
import unicodedata
from urllib.parse import quote
from typing import List, Dict, Optional

import requests
import pandas as pd
import streamlit as st
from bs4 import BeautifulSoup

# ==============================================
# Configura√ß√µes e Utilidades
# ==============================================

APP_TITLE = "üè¢ Prospectador B2B ‚Äì Mineradoras do Par√° (v9.1 - Multi-APIs & Anti-Bloqueio)"

st.set_page_config(page_title=APP_TITLE, page_icon="‚õèÔ∏è", layout="wide")

UF_NOMES = {
    "AC": "Acre", "AL": "Alagoas", "AP": "Amap√°", "AM": "Amazonas",
    "BA": "Bahia", "CE": "Cear√°", "DF": "Distrito Federal", "ES": "Esp√≠rito Santo",
    "GO": "Goi√°s", "MA": "Maranh√£o", "MT": "Mato Grosso", "MS": "Mato Grosso do Sul",
    "MG": "Minas Gerais", "PA": "Par√°", "PB": "Para√≠ba", "PR": "Paran√°",
    "PE": "Pernambuco", "PI": "Piau√≠", "RJ": "Rio de Janeiro", "RN": "Rio Grande do Norte",
    "RS": "Rio Grande do Sul", "RO": "Rond√¥nia", "RR": "Roraima", "SC": "Santa Catarina",
    "SP": "S√£o Paulo", "SE": "Sergipe", "TO": "Tocantins"
}

# CNAEs espec√≠ficos para minera√ß√£o
CNAES_MINERACAO = {
    "0710-3/01": "Extra√ß√£o de min√©rio de ferro",
    "0721-9/01": "Extra√ß√£o de min√©rio de alum√≠nio",
    "0724-3/01": "Extra√ß√£o de min√©rio de metais preciosos",
    "0729-4/04": "Extra√ß√£o de outros minerais met√°licos n√£o-ferrosos",
    "0810-0/00": "Extra√ß√£o de pedra, areia e argila",
    "0891-6/00": "Extra√ß√£o de minerais para fabrica√ß√£o de adubos e fertilizantes",
    "0893-2/00": "Extra√ß√£o de gemas (pedras preciosas e semipreciosas)",
    "0500-3/01": "Extra√ß√£o de carv√£o mineral",
    "0990-4/01": "Atividades de apoio √† extra√ß√£o de min√©rio de ferro",
    "0990-4/02": "Atividades de apoio √† extra√ß√£o de minerais met√°licos n√£o-ferrosos",
    "0990-4/03": "Atividades de apoio √† extra√ß√£o de minerais n√£o-met√°licos"
}


def limpa_cnpj(cnpj: str) -> str:
    """Remove caracteres n√£o num√©ricos de um CNPJ."""
    return re.sub(r"\D", "", str(cnpj or ""))

def formata_cnpj(cnpj: str) -> str:
    """Formata CNPJ com pontua√ß√£o."""
    c = limpa_cnpj(cnpj)
    if len(c) == 14:
        return f"{c[:2]}.{c[2:5]}.{c[5:8]}/{c[8:12]}-{c[12:]}"
    return cnpj

DEFAULT_UA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"

@st.cache_data(ttl=60 * 30, show_spinner=False)
def http_get(url: str, timeout: int = 30, headers: dict = None) -> requests.Response | None:
    """Realiza uma requisi√ß√£o HTTP GET com tratamento robusto de erros."""
    try:
        h = headers if headers else {"User-Agent": DEFAULT_UA}
        r = requests.get(url, headers=h, timeout=timeout)
        r.raise_for_status()
        return r
    except requests.exceptions.RequestException as e:
        st.warning(f"‚ö†Ô∏è Erro ao acessar {url}: {str(e)}")
        return None

# ==============================================
# APIs de Consulta CNPJ (M√∫ltiplas Fontes Confi√°veis)
# ==============================================

@st.cache_data(ttl=60 * 60, show_spinner=False)
def consultar_cnpj_brasilapi(cnpj: str) -> Dict:
    """Consulta CNPJ na BrasilAPI (fonte principal e mais est√°vel)."""
    c = limpa_cnpj(cnpj)
    if len(c) != 14: return {}
    
    url = f"https://brasilapi.com.br/api/cnpj/v1/{c}"
    r = http_get(url)
    if not r: return {}
    
    try:
        data = r.json()
        telefone = ""
        if data.get("ddd_telefone_1"):
            telefone = f"({data.get('ddd_telefone_1')}) {data.get('telefone_1', '')}"
        
        return {
            "CNPJ": formata_cnpj(data.get("cnpj", "")),
            "Raz√£o Social": data.get("razao_social", ""),
            "Nome Fantasia": data.get("nome_fantasia", ""),
            "Situa√ß√£o": data.get("descricao_situacao_cadastral", ""),
            "CNAE Principal": f"{data.get('cnae_fiscal', '')} - {data.get('cnae_fiscal_descricao', '')}",
            "Telefone": telefone.strip(),
            "Email": data.get("email", "").lower(),
            "Endere√ßo": f"{data.get('logradouro', '')}, {data.get('numero', '')}",
            "Bairro": data.get("bairro", ""),
            "Cidade": data.get("municipio", ""),
            "UF": data.get("uf", ""),
            "CEP": data.get("cep", ""),
            "Fonte dos Dados": "BrasilAPI"
        }
    except Exception as e:
        return {}

@st.cache_data(ttl=60 * 60, show_spinner=False)
def consultar_cnpj_receitaws(cnpj: str) -> Dict:
    """Consulta CNPJ na ReceitaWS (fonte alternativa)."""
    c = limpa_cnpj(cnpj)
    if len(c) != 14: return {}
    
    url = f"https://www.receitaws.com.br/v1/cnpj/{c}"
    r = http_get(url)
    # A API da ReceitaWS tem um limite de requisi√ß√µes, ent√£o pode falhar
    if not r or r.status_code != 200: return {}
    
    try:
        data = r.json()
        if data.get("status") == "ERROR": return {}
        
        cnae_principal = data.get('atividade_principal', [{}])[0]

        return {
            "CNPJ": formata_cnpj(data.get("cnpj", "")),
            "Raz√£o Social": data.get("nome", ""),
            "Nome Fantasia": data.get("fantasia", ""),
            "Situa√ß√£o": data.get("situacao", ""),
            "CNAE Principal": f"{cnae_principal.get('code', '')} - {cnae_principal.get('text', '')}",
            "Telefone": data.get("telefone", ""),
            "Email": data.get("email", "").lower(),
            "Endere√ßo": f"{data.get('logradouro', '')}, {data.get('numero', '')}",
            "Bairro": data.get("bairro", ""),
            "Cidade": data.get("municipio", ""),
            "UF": data.get("uf", ""),
            "CEP": data.get("cep", ""),
            "Fonte dos Dados": "ReceitaWS"
        }
    except Exception as e:
        return {}

def consultar_cnpj_multiplas_fontes(cnpj: str) -> Dict:
    """Tenta consultar um CNPJ em m√∫ltiplas APIs at√© obter sucesso."""
    apis = [consultar_cnpj_brasilapi, consultar_cnpj_receitaws]
    
    for api_func in apis:
        try:
            resultado = api_func(cnpj)
            if resultado and resultado.get("CNPJ"):
                return resultado
            time.sleep(1)  # Pausa de 1 segundo entre tentativas de API
        except Exception:
            continue
    
    return {} # Retorna vazio se todas as fontes falharem

# ==============================================
# Descoberta de Empresas (Scraping)
# ==============================================

@st.cache_data(ttl=60 * 30, show_spinner=False)
def buscar_empresas_cnpja_scraping(cnae_code: str, uf: str, max_empresas: int) -> List[Dict]:
    """Busca empresas no site cnpja.com por scraping (√∫nica fonte de descoberta)."""
    cnae_limpo = re.sub(r'\D', '', cnae_code)
    # A estrutura correta da URL parece ser por UF primeiro, depois CNAE
    url = f"https://cnpja.com/empresas/{uf.upper()}/?cnae={cnae_limpo}"
    
    headers = {
        'User-Agent': DEFAULT_UA,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Referer': 'https://www.google.com/',
    }
    
    r = http_get(url, headers=headers)
    if not r: return []
    
    try:
        soup = BeautifulSoup(r.text, "html.parser")
        empresas = []
        
        # A estrutura do site usa listas <ul> com a classe "row-list"
        list_items = soup.select("ul.row-list > li")
        
        for item in list_items[:max_empresas]:
            link_tag = item.find("a")
            if link_tag:
                nome = link_tag.get_text(strip=True)
                # O CNPJ est√° no pr√≥prio texto do item, ap√≥s "CNPJ: "
                cnpj_text = item.get_text()
                cnpj_match = re.search(r"CNPJ:\s*([\d\.\-/]+)", cnpj_text)
                if nome and cnpj_match:
                    empresas.append({
                        "Nome": nome,
                        "CNPJ": limpa_cnpj(cnpj_match.group(1)),
                        "Origem da Descoberta": f"CNPJ√° - CNAE {cnae_code}"
                    })
        return empresas
        
    except Exception as e:
        st.warning(f"Erro no scraping do CNPJ√° para CNAE {cnae_code}: {e}")
        return []


# ==============================================
# Interface Principal do Streamlit
# ==============================================

def main():
    st.title(APP_TITLE)
    st.markdown("üéØ **Foco:** Encontrar e enriquecer dados de empresas de minera√ß√£o no Par√°.")
    
    if "resultados_finais" not in st.session_state:
        st.session_state["resultados_finais"] = []
    
    # Sidebar com configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes da Busca")
        
        # Sele√ß√£o de CNAEs
        cnaes_selecionados = st.multiselect(
            "Selecione os CNAEs de Minera√ß√£o:",
            options=list(CNAES_MINERACAO.keys()),
            format_func=lambda x: f"{x} - {CNAES_MINERACAO[x]}",
            default=list(CNAES_MINERACAO.keys())[:3] # Seleciona os 3 primeiros por padr√£o
        )
        
        uf_selecionada = st.selectbox("Estado:", list(UF_NOMES.keys()), index=list(UF_NOMES.keys()).index("PA"))
        max_empresas_por_cnae = st.slider("M√°x. de empresas a buscar por CNAE:", 5, 50, 10)

    # Bot√£o de busca principal
    if st.button("üöÄ Iniciar Prospec√ß√£o", type="primary", disabled=(not cnaes_selecionados)):
        st.session_state["resultados_finais"] = []
        
        st.info(f"üîç Iniciando busca em {len(cnaes_selecionados)} CNAEs no estado: {UF_NOMES[uf_selecionada]}")
        
        todas_empresas_descobertas = []
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Etapa 1: Descoberta de CNPJs via Scraping
        for i, cnae_code in enumerate(cnaes_selecionados):
            progresso = (i + 1) / len(cnaes_selecionados)
            cnae_desc = CNAES_MINERACAO[cnae_code]
            status_text.text(f"Buscando empresas para: {cnae_desc[:50]}...")
            progress_bar.progress(progresso)
            
            empresas_encontradas = buscar_empresas_cnpja_scraping(cnae_code, uf_selecionada, max_empresas_por_cnae)
            todas_empresas_descobertas.extend(empresas_encontradas)
            
            # PAUSA ESTRAT√âGICA para evitar erro 429
            time.sleep(random.uniform(2, 5))
        
        progress_bar.empty()
        status_text.empty()
        
        # Remove duplicatas por CNPJ antes de enriquecer
        cnpjs_vistos = set()
        empresas_unicas = []
        for emp in todas_empresas_descobertas:
            cnpj = limpa_cnpj(emp.get("CNPJ", ""))
            if cnpj and cnpj not in cnpjs_vistos:
                cnpjs_vistos.add(cnpj)
                empresas_unicas.append(emp)
        
        if not empresas_unicas:
            st.error("‚ùå Nenhuma empresa encontrada. O site pode estar bloqueando o acesso ou n√£o h√° empresas listadas para os crit√©rios. Tente novamente mais tarde.")
            return
        
        st.success(f"‚úÖ Descoberta conclu√≠da! {len(empresas_unicas)} empresas √∫nicas encontradas.")
        
        # Etapa 2: Enriquecimento com dados via APIs
        st.info("üìä Enriquecendo dados com informa√ß√µes da Receita Federal via APIs...")
        
        progress_bar_enrich = st.progress(0)
        status_enrich = st.empty()
        resultados_enriquecidos = []
        
        for i, empresa in enumerate(empresas_unicas):
            progresso = (i + 1) / len(empresas_unicas)
            status_enrich.text(f"Enriquecendo: {empresa.get('Nome', '')[:40]}...")
            progress_bar_enrich.progress(progresso)
            
            dados_completos = consultar_cnpj_multiplas_fontes(empresa.get("CNPJ", ""))
            
            if dados_completos:
                # Adiciona a origem da descoberta para refer√™ncia
                dados_completos["Origem da Descoberta"] = empresa.get("Origem da Descoberta", "")
                resultados_enriquecidos.append(dados_completos)
            
            # Pausa para respeitar os limites das APIs
            time.sleep(random.uniform(0.5, 1.5))
        
        progress_bar_enrich.empty()
        status_enrich.empty()
        
        st.session_state["resultados_finais"] = resultados_enriquecidos
        
        if resultados_enriquecidos:
            st.success(f"üéâ Prospec√ß√£o conclu√≠da! {len(resultados_enriquecidos)} empresas com dados completos.")
            st.balloons()
        else:
            st.warning("‚ö†Ô∏è Empresas foram encontradas, mas falha no enriquecimento dos dados. Verifique a conex√£o ou os limites das APIs.")

    # Exibi√ß√£o dos resultados
    if st.session_state["resultados_finais"]:
        st.header("üìã Resultados da Prospec√ß√£o")
        
        df_resultados = pd.DataFrame(st.session_state["resultados_finais"])
        
        # Garante a ordem das colunas
        colunas_ordem = [
            "Raz√£o Social", "Nome Fantasia", "CNPJ", "Telefone", "Email",
            "Situa√ß√£o", "Cidade", "UF", "Endere√ßo", "Bairro", "CEP",
            "CNAE Principal", "Fonte dos Dados", "Origem da Descoberta"
        ]
        colunas_existentes = [col for col in colunas_ordem if col in df_resultados.columns]
        df_display = df_resultados[colunas_existentes]

        st.dataframe(df_display, use_container_width=True)
        
        # Download em Excel
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df_display.to_excel(writer, index=False, sheet_name='Prospects')
        excel_data = output.getvalue()
        
        st.download_button(
            label="üì• Baixar Resultados em Excel (.xlsx)",
            data=excel_data,
            file_name=f"prospects_mineradoras_{uf_selecionada.lower()}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )


if __name__ == "__main__":
    main()
